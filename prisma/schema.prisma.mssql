generator client {
  provider                = "prisma-client-js"
  connectionTimeoutMillis = 30000
  connectionLimit         = 75
  fulltextIndex           = true
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  username          String?             @unique
  password          String?             @db.VarChar(255)
  image             String?             @db.Text
  accounts          Account[]
  sessions          Session[]
  apiKeys           ApiKey[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Conversation      Conversation[]
  Message           Message[]
  ChatSettings      ChatSettings[]
  UserCustomization UserCustomization[]
  PreferredModel    PreferredModel[]
  Attachment        Attachment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @db.Text
  provider  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id                    String         @id @default(cuid())
  userId                String
  title                 String         @db.VarChar(500)
  isPinned              Boolean        @default(false)
  isPublic              Boolean        @default(false)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  isGenerating          Boolean        @default(false)
  isRetry               Boolean        @default(false)
  branchedFromConvoId   String?
  branchedIds           String?        @db.Text // JSON array of all conversation IDs in the branch chain
  user                  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  branchedFromConvo     Conversation?  @relation("ConversationBranch", fields: [branchedFromConvoId], references: [id])
  branchedConversations Conversation[] @relation("ConversationBranch")
  Attachment            Attachment[]
  Message               Message[]
}

model Message {
  id               String       @id @default(cuid())
  conversationId   String
  userId           String
  content          String       @db.LongText
  role             String
  provider         String
  model            String?
  reasoningContent String?      @db.LongText
  promptId         String?
  responseId       String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt           Prompt?      @relation(fields: [promptId], references: [id])
}

model ChatSettings {
  id                String   @id @default(cuid())
  userId            String
  provider          String
  model             String
  promptId          String?
  reasoningEffort   String?
  temperature       Float?   @default(0.5)
  maxTokens         Int?     @default(1000)
  topP              Float?   @default(1)
  isWebSearch       Boolean  @default(false)
  isImageGeneration Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt            Prompt?  @relation(fields: [promptId], references: [id])
}

model UserCustomization {
  id                    String   @id @default(cuid())
  userId                String
  displayName           String?
  userRole              String?  @db.Text
  userTraits            String?  @db.Text
  additionalContext     String?  @db.Text
  isBoringTheme         Boolean  @default(false)
  hidePersonalInfo      Boolean  @default(false)
  disableThematicBreaks Boolean  @default(false)
  showStatsForNerds     Boolean  @default(false)
  mainTextFont          String?  @default("Inter")
  codeFont              String?  @default("JetBrains Mono")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Prompt {
  id           String         @id @default(cuid())
  userId       String
  prompt       String         @db.LongText
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ChatSettings ChatSettings[]
  Message      Message[]
}

model PreferredModel {
  id        String   @id @default(cuid())
  userId    String
  model     String
  provider  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attachment {
  id             String        @id @default(cuid())
  userId         String
  conversationId String?
  filename       String        @db.VarChar(255)
  fileUrl        String        @db.Text
  fileType       String
  isShared       Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
}

model OpenRouterModel {
  id            String   @id @default(cuid())
  modelId       String   @unique
  name          String
  provider      String
  description   String?  @db.Text
  contextLength Int?
  pricing       String?  @db.Text // Changed from Json to String for MSSQL compatibility
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AnthropicModel {
  id            String   @id @default(cuid())
  modelId       String   @unique
  name          String
  modelFamily   String
  description   String?  @db.Text
  contextLength Int?
  maxOutput     Int?
  pricing       String?  @db.Text // Changed from Json to String for MSSQL compatibility
  capabilities  String?  @db.Text // Changed from Json to String for MSSQL compatibility
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OpenaiModel {
  id            String   @id @default(cuid())
  modelId       String   @unique
  name          String
  modelFamily   String
  description   String?  @db.Text
  contextLength Int?
  maxOutput     Int?
  pricing       String?  @db.Text // Changed from Json to String for MSSQL compatibility
  capabilities  String?  @db.Text // Changed from Json to String for MSSQL compatibility
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GoogleModel {
  id            String   @id @default(cuid())
  modelId       String   @unique
  name          String
  modelFamily   String
  description   String?  @db.Text
  contextLength Int?
  maxOutput     Int?
  pricing       String?  @db.Text // Changed from Json to String for MSSQL compatibility
  capabilities  String?  @db.Text // Changed from Json to String for MSSQL compatibility
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model DeepSeekModel {
  id            String   @id @default(cuid())
  modelId       String   @unique
  name          String
  modelFamily   String
  description   String?  @db.Text
  contextLength Int?
  maxOutput     Int?
  pricing       String?  @db.Text // Changed from Json to String for MSSQL compatibility
  capabilities  String?  @db.Text // Changed from Json to String for MSSQL compatibility
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model XaiModel {
  id            String   @id @default(cuid())
  modelId       String   @unique
  name          String
  modelFamily   String
  description   String?  @db.Text
  contextLength Int?
  maxOutput     Int?
  pricing       String?  @db.Text // Changed from Json to String for MSSQL compatibility
  capabilities  String?  @db.Text // Changed from Json to String for MSSQL compatibility
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ResponseCache {
  id        String   @id @default(cuid())
  cacheKey  String   @unique @db.VarChar(255)
  response  String   @db.LongText
  userId    String?
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt])
  @@index([userId])
}
