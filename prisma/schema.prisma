datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  username          String?             @unique
  password          String?
  image             String?
  accounts          Account[]
  sessions          Session[]
  apiKeys           ApiKey[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Conversation      Conversation[]
  Message           Message[]
  ChatSettings      ChatSettings[]
  UserCustomization UserCustomization[]
  PreferredModel    PreferredModel[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String
  provider  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Message   Message[]
}

model Message {
  id               String       @id @default(cuid())
  conversationId   String
  userId           String
  content          String
  role             String
  provider         String
  model            String?
  reasoningContent String?
  promptId         String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt           Prompt?      @relation(fields: [promptId], references: [id])
}

model ChatSettings {
  id              String   @id @default(cuid())
  userId          String
  provider        String
  model           String
  promptId        String?
  reasoningEffort String?
  temperature     Float?   @default(0.5)
  maxTokens       Int?     @default(1000)
  topP            Float?   @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt          Prompt?  @relation(fields: [promptId], references: [id])
}

model UserCustomization {
  id                    String   @id @default(cuid())
  userId                String
  displayName           String?
  userRole              String?
  userTraits            String?
  additionalContext     String?
  isBoringTheme         Boolean  @default(false)
  hidePersonalInfo      Boolean  @default(false)
  disableThematicBreaks Boolean  @default(false)
  showStatsForNerds     Boolean  @default(false)
  mainTextFont          String?  @default("Inter")
  codeFont              String?  @default("JetBrains Mono")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Prompt {
  id           String         @id @default(cuid())
  userId       String
  prompt       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ChatSettings ChatSettings[]
  Message      Message[]
}

model PreferredModel {
  id        String   @id @default(cuid())
  userId    String
  model     String
  provider  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OpenRouterModel {
  id            String   @id @default(cuid())
  modelId       String   @unique
  name          String
  provider      String
  description   String?
  contextLength Int?
  pricing       Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AnthropicModel {
  id            String   @id @default(cuid())
  modelId       String   @unique
  name          String
  modelFamily   String
  description   String?
  contextLength Int?
  maxOutput     Int?
  pricing       Json?
  capabilities  Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OpenaiModel {
  id            String   @id @default(cuid())
  modelId       String   @unique
  name          String
  modelFamily   String
  description   String?
  contextLength Int?
  maxOutput     Int?
  pricing       Json?
  capabilities  Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GoogleModel {
  id            String   @id @default(cuid())
  modelId       String   @unique
  name          String
  modelFamily   String
  description   String?
  contextLength Int?
  maxOutput     Int?
  pricing       Json?
  capabilities  Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model DeepSeekModel {
  id            String   @id @default(cuid())
  modelId       String   @unique
  name          String
  modelFamily   String
  description   String?
  contextLength Int?
  maxOutput     Int?
  pricing       Json?
  capabilities  Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model XaiModel {
  id            String   @id @default(cuid())
  modelId       String   @unique
  name          String
  modelFamily   String
  description   String?
  contextLength Int?
  maxOutput     Int?
  pricing       Json?
  capabilities  Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ResponseCache {
  id        String   @id @default(cuid())
  cacheKey  String   @unique
  response  String
  userId    String?
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt])
  @@index([userId])
}
